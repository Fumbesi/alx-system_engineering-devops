Components:

Server 1 (Web & App):

Web Server (Nginx): Handles HTTP requests and serves static files.
Application Server: Processes dynamic content and user requests.
Server 2 (App & DB):

Application Server: Works alongside the first server for load balancing.
Load Balancer (HAProxy): Distributes incoming traffic across the two application servers.
Application Files (Code Base): Contains the application code.
Database (MySQL):

Hosts the application's data.
Explanation for Additional Elements:

Two Servers:
Enhances redundancy and performance by distributing tasks across multiple machines.
Load Balancer (HAProxy):
Distributes incoming traffic evenly between the two application servers, preventing overload on a single server.
Application Files (Code Base):
Houses the application's code, shared between the application servers.
Load Balancer Configuration:

Distribution Algorithm: Round Robin

Allocates requests in a rotating manner among the available application servers.
Active-Active Setup:

Both application servers are active, sharing the incoming load.
Database Primary-Replica (Master-Slave) Cluster:

Primary Node:
Receives write operations from the application.
Replica Node:
Replicates data from the primary node.
Handles read operations to distribute the database load.
Difference Between Primary and Replica:

Primary Node:
Accepts write operations.
Responsible for data modification.
Replica Node:
Supports read operations.
Provides data redundancy and availability.
Issues:

Single Point of Failure (SPOF):

No mitigation has been implemented for potential server or component failures.
Security Issues:

No firewall is mentioned, leaving the infrastructure vulnerable.
HTTPS (SSL/TLS) is not specified, compromising data security during transmission.
No Monitoring:

Lack of monitoring tools and processes makes it challenging to identify and resolve issues promptly.
